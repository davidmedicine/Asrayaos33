// === File: src/features/chat/components/messages/ThinkingTraceMessage.tsx ===

// Description: Component for rendering agent thinking traces from stream events, with enhanced styling and accessibility.



import React from 'react';

import { motion } from 'framer-motion'; // Added for animations

import { cn } from '@/lib/utils';

import { StreamEvent } from '@/types';

import { AsrayaAgentId } from '@/types/agent';

import { getAgentData } from '@/lib/core/agentRegistry'; // Import agent data utility



// --- Helper: Step Type Icons ---



// Provides accessible icons for different thinking step types.

// TODO: Replace emojis with a proper Icon component library (e.g., lucide-react)

const StepTypeIcon = ({ stepType }: { stepType: string }) => {

┬а const iconMap: Record<string, { icon: string; label: string }> = {

┬а ┬а thought: { icon: '­ЪДа', label: 'Thought' },

┬а ┬а action: { icon: 'РџЎ№ИЈ', label: 'Action' },

┬а ┬а observation: { icon: '­ЪЉЂ№ИЈ', label: 'Observation' },

┬а ┬а response: { icon: '­Ъњг', label: 'Response Generation' },

┬а ┬а tool_code: { icon: '­Ъњ╗', label: 'Tool: Code Execution' }, // Example tool step

┬а ┬а tool_search: { icon: '­ЪћЇ', label: 'Tool: Search' }, // Example tool step

┬а };

┬а const { icon, label } = iconMap[stepType] || { icon: '­Ъћё', label: 'Processing Step' };



┬а return <span title={label}>{icon}</span>;

};



// --- Component Props ---



interface ThinkingTraceMessageProps {

┬а event: StreamEvent;

┬а globalActiveAgentId?: AsrayaAgentId | string; // Allow string for flexibility if IDs aren't strictly AsrayaAgentId type

┬а isDebug?: boolean;

┬а className?: string;

}



// --- Component Implementation ---



export const ThinkingTraceMessage = React.memo(({

┬а event,

┬а globalActiveAgentId,

┬а isDebug = false,

┬а className

}: ThinkingTraceMessageProps) => {

┬а // Extract data from event metadata

┬а const agentName = event.part.metadata?.agentName || globalActiveAgentId || 'unknown';

┬а const stepType = event.part.metadata?.stepType || 'thought';

┬а const text = event.part.text || '';



┬а // Determine if this trace is from the globally active agent

┬а const isActiveAgent = agentName === globalActiveAgentId;



┬а // Get agent-specific data (color, symbol)

┬а const traceAgentData = getAgentData(agentName, globalActiveAgentId || 'oracle'); // Provide fallback if needed

┬а const traceAgentColorVar = traceAgentData.colorPrimary; // CSS variable for the agent's primary color

┬а const traceAgentSymbol = traceAgentData.symbol;



┬а // Data attributes for potential future styling/grouping

┬а const dataAttributes = {

┬а ┬а 'data-agent-name': agentName,

┬а ┬а 'data-step-type': stepType,

┬а ┬а 'data-agent-color': isActiveAgent ? 'primary' : 'muted', // For potential CSS targeting

┬а ┬а 'data-step': stepType, // Duplicate for convenience? Or remove data-step-type

┬а };



┬а return (

┬а ┬а <motion.div

┬а ┬а ┬а // Animation on entry

┬а ┬а ┬а initial={{ opacity: 0, y: 5 }}

┬а ┬а ┬а animate={{ opacity: 1, y: 0 }}

┬а ┬а ┬а transition={{ duration: 0.2, ease: 'easeOut' }}

┬а ┬а ┬а // Base styling and layout

┬а ┬а ┬а className={cn(

┬а ┬а ┬а ┬а 'group relative pl-8 pr-3 py-2 text-sm rounded-md my-1 transition-colors',

┬а ┬а ┬а ┬а 'bg-[var(--bg-surface)]', // Base background

┬а ┬а ┬а ┬а 'border-l-2', // Left border width

┬а ┬а ┬а ┬а 'hover:bg-[var(--bg-hover)]', // Hover background

┬а ┬а ┬а ┬а 'text-[var(--text-muted)] italic', // Default text style for traces

┬а ┬а ┬а ┬а // Apply opacity based on whether the agent is active

┬а ┬а ┬а ┬а isActiveAgent ? 'opacity-100' : 'opacity-80 hover:opacity-100', // Slightly dimmed if not active

┬а ┬а ┬а ┬а className // Merge with external classes

┬а ┬а ┬а )}

┬а ┬а ┬а // Apply dynamic border color using inline style

┬а ┬а ┬а style={{ borderColor: traceAgentColorVar }}

┬а ┬а ┬а {...dataAttributes} // Spread data attributes

┬а ┬а >

┬а ┬а ┬а {/* Optional Accent Glow (subtle visual enhancement) */}

┬а ┬а ┬а <div

┬а ┬а ┬а ┬а className="absolute left-0 top-0 bottom-0 w-[3px] opacity-50 rounded-l-sm pointer-events-none"

┬а ┬а ┬а ┬а style={{ backgroundColor: traceAgentColorVar }}

┬а ┬а ┬а ┬а aria-hidden="true"

┬а ┬а ┬а />



┬а ┬а ┬а {/* Step type icon */}

┬а ┬а ┬а <div className="absolute left-2 top-[9px] text-base leading-none opacity-70 group-hover:opacity-100 transition-opacity">

┬а ┬а ┬а ┬а ┬а<StepTypeIcon stepType={stepType} />

┬а ┬а ┬а </div>



┬а ┬а ┬а {/* Agent name label (visible on hover or if not active agent or debug mode) */}

┬а ┬а ┬а {(!isActiveAgent || isDebug) && (

┬а ┬а ┬а ┬а <div className={cn(

┬а ┬а ┬а ┬а ┬а 'absolute top-1 right-2 text-[10px] px-1.5 py-0.5 rounded font-medium z-10', // Ensure badge is above content

┬а ┬а ┬а ┬а ┬а // Use agent color for active agent badge, muted for others

┬а ┬а ┬а ┬а ┬а isActiveAgent

┬а ┬а ┬а ┬а ┬а ┬а ? 'bg-[var(--agent-color-primary-transparent)] text-[var(--agent-color-primary)]'

┬а ┬а ┬а ┬а ┬а ┬а // Use a standard muted style for non-active agent traces

┬а ┬а ┬а ┬а ┬а ┬а : 'bg-[var(--bg-muted)] text-[var(--text-muted)]',

┬а ┬а ┬а ┬а ┬а // Control visibility

┬а ┬а ┬а ┬а ┬а isDebug ? 'opacity-100' : 'opacity-0 group-hover:opacity-100 transition-opacity duration-150'

┬а ┬а ┬а ┬а )}>

┬а ┬а ┬а ┬а ┬а {agentName} {isDebug && traceAgentSymbol ? traceAgentSymbol : ''}

┬а ┬а ┬а ┬а </div>

┬а ┬а ┬а )}



┬а ┬а ┬а {/* Thinking content with accessibility attributes */}

┬а ┬а ┬а <div

┬а ┬а ┬а ┬а className="whitespace-pre-wrap break-words"

┬а ┬а ┬а ┬а role="note" // Semantic role for assistive tech

┬а ┬а ┬а ┬а aria-label={`Agent thinking trace by ${agentName}, type ${stepType}`} // Describe content for screen readers

┬а ┬а ┬а >

┬а ┬а ┬а ┬а {text}

┬а ┬а ┬а </div>



┬а ┬а ┬а {/* Debug information (only visible in debug mode) */}

┬а ┬а ┬а {isDebug && (

┬а ┬а ┬а ┬а <div className="mt-2 text-[10px] bg-[var(--bg-muted)] p-1.5 rounded leading-tight">

┬а ┬а ┬а ┬а ┬а <div>Agent: {agentName} {traceAgentSymbol ?? ''}</div>

┬а ┬а ┬а ┬а ┬а <div>TaskId: {event.taskId}</div>

┬а ┬а ┬а ┬а ┬а <div>Type: {event.type}</div>

┬а ┬а ┬а ┬а ┬а <div>Step: {stepType}</div>

┬а ┬а ┬а ┬а ┬а <div>Timestamp: {new Date(event.timestamp).toLocaleTimeString()}</div>

┬а ┬а ┬а ┬а ┬а {event.part.metadata && Object.keys(event.part.metadata).length > 0 && (

┬а ┬а ┬а ┬а ┬а ┬а <div>Metadata: <pre className="inline whitespace-pre-wrap">{JSON.stringify(event.part.metadata, null, 2)}</pre></div>

┬а ┬а ┬а ┬а ┬а )}

┬а ┬а ┬а ┬а </div>

┬а ┬а ┬а )}

┬а ┬а </motion.div>

┬а );

});



ThinkingTraceMessage.displayName = 'ThinkingTraceMessage';



// TODO (Styling - Brief 3.X): Refine border style, active agent highlight (e.g., brighter background?), thinking dots animation?.

// TODO (UX - Brief 5.3): Consider agent-specific animations or more distinct visual cues beyond color.

// TODO: Replace emoji icons in StepTypeIcon with a proper Icon component library.