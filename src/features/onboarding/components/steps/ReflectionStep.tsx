// === File: asrayaos3.4/src/features/onboarding/components/steps/ReflectionStep.tsx ===

'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { Textarea } from '@/components/ui/Textarea'; // Assuming this primitive exists
import { motion, AnimatePresence } from 'framer-motion';

// --- Prop Types ---
// Ensure these types are correctly defined and imported from your central types location
// e.g., '@/lib/state/slices/onboardingSlice.ts' or '@/features/onboarding/types.ts'
import type {
Â  StepComponentProps,
Â  OnboardingInputs,
} from '@/features/onboarding/types'; // <-- Adjust this import path if needed

// --- Constants ---
const NAVIGATION_DELAY_MS = 800; // Delay before navigating after save confirmation appears

export const ReflectionStep: React.FC<StepComponentProps> = ({
Â  inputs,
Â  setInput,
Â  onNext,
Â  onBack,
Â  // stepMeta is available but not used in this simplified version
}) => {
  // State for the user's reflection input
Â  const [userReflection, setUserReflection] = useState<string>(
Â  Â  // Initialize with existing value if user comes back to this step
    // Ensure 'userReflection' key exists in OnboardingInputs type
Â  Â  (inputs as OnboardingInputs)?.userReflection || ''
Â  );
  // State to control the visibility of the "saving artifact" preview animation
Â  const [showArtifactPreview, setShowArtifactPreview] = useState(false);
  // State for potential errors (e.g., if setInput failed, though unlikely here)
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Timer ref for navigation delay
Â  const navigationTimerRef = React.useRef<NodeJS.Timeout | null>(null);

  // Cleanup timer on component unmount
Â  useEffect(() => {
Â  Â  return () => {
Â  Â  Â  if (navigationTimerRef.current) {
Â  Â  Â  Â  Â  clearTimeout(navigationTimerRef.current);
Â  Â  Â  }
Â  Â  };
Â  }, []);

  // Function to handle saving the reflection and moving next
Â  const handleNext = () => {
    // Basic guard against multiple clicks while preview is showing
    if (showArtifactPreview) return;

    // Clear previous errors
    setErrorMessage(null);

    // Validate input (handled by button disabled state mostly, but good practice)
    if (!userReflection.trim()) {
        setErrorMessage("Please share your reflection before continuing.");
        return;
    }

Â  Â  if (setInput) {
Â  Â  Â  // --- CORE FUNCTIONALITY: Save user's reflection to global state ---
Â  Â  Â  setInput('userReflection', userReflection); // Ensure 'userReflection' key exists in type
Â  Â  } else {
Â  Â  Â  console.warn('setInput prop is missing in ReflectionStep');
      // Optionally set an error message for the user
      setErrorMessage("Could not save reflection due to an internal error.");
      return; // Stop processing if setInput is missing
Â  Â  }

Â  Â  // Trigger artifact preview animation
Â  Â  setShowArtifactPreview(true);

Â  Â  // Delay moving next slightly to allow the user to see the preview animation
    // Clear any existing timer first
    if (navigationTimerRef.current) clearTimeout(navigationTimerRef.current);
Â  Â  navigationTimerRef.current = setTimeout(() => {
Â  Â  Â  onNext();
      // Reset preview state if needed, depends on unmount behavior
      // setShowArtifactPreview(false);
Â  Â  }, NAVIGATION_DELAY_MS);
Â  };

Â  return (
Â  Â  <div
Â  Â  Â  role="region"
Â  Â  Â  aria-labelledby="step-title-reflection"
Â  Â  Â  className="flex flex-col items-center justify-center h-full max-w-xl mx-auto p-6 space-y-8"
Â  Â  >
Â  Â  Â  <div className="space-y-6 w-full">
Â  Â  Â  Â  <h2
Â  Â  Â  Â  Â  id="step-title-reflection"
Â  Â  Â  Â  Â  className="text-2xl md:text-3xl font-light text-center mb-6 text-text-default"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Reflection
Â  Â  Â  Â  </h2>

        {/* Optional Error Message Display */}
        {errorMessage && (
           <motion.div
             initial={{ opacity: 0 }} animate={{ opacity: 1 }}
             className="text-center text-sm text-[var(--color-error)] mb-4" // Use CSS var
             role="alert"
           >
             {errorMessage}
           </motion.div>
        )}

Â  Â  Â  Â  {/* User Reflection Input Section */}
Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  <label
Â  Â  Â  Â  Â  Â  htmlFor="user-reflection-textarea"
Â  Â  Â  Â  Â  Â  className="block text-md font-medium text-text-default"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  What did that reveal to you?
Â  Â  Â  Â  Â  </label>
          <p className="text-sm text-text-muted mb-2">
            Feel free to write about feelings, insights, or questions that arose during your intention setting.
          </p>
Â  Â  Â  Â  Â  <Textarea
Â  Â  Â  Â  Â  Â  id="user-reflection-textarea"
Â  Â  Â  Â  Â  Â  value={userReflection}
Â  Â  Â  Â  Â  Â  onChange={(e) => {
              setUserReflection(e.target.value);
              if (errorMessage) setErrorMessage(null); // Clear error on input
            }}
Â  Â  Â  Â  Â  Â  placeholder="Share your thoughts, feelings, or insights..."
Â  Â  Â  Â  Â  Â  rows={6}
Â  Â  Â  Â  Â  Â  className="w-full bg-bg-input border-border-default focus:border-primary focus:ring-primary disabled:opacity-70" // Added disabled style
Â  Â  Â  Â  Â  Â  data-testid="user-reflection-input"
Â  Â  Â  Â  Â  Â  aria-label="Your reflection input based on the prompt 'What did that reveal to you?'"
            disabled={showArtifactPreview} // Disable textarea while saving/transitioning
            aria-invalid={!!errorMessage}
            aria-describedby={errorMessage ? "reflection-error-message-id" : undefined} // Link error message if displayed differently
Â  Â  Â  Â  Â  />
           {/* Render error message specifically for textarea if needed, or use above general error */}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Artifact Preview Notification (using Framer Motion) */}
Â  Â  Â  Â  <div className="min-h-[2.5em] flex items-center justify-center"> {/* Wrapper to prevent layout shift */}
Â  Â  Â  Â  Â  <AnimatePresence>
Â  Â  Â  Â  Â  Â  {showArtifactPreview && (
Â  Â  Â  Â  Â  Â  Â  <motion.div
                key="artifact-preview" // Add key for AnimatePresence
Â  Â  Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: 10 }}
Â  Â  Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  Â  Â  exit={{ opacity: 0, y: -10 }}
Â  Â  Â  Â  Â  Â  Â  Â  transition={{ duration: 0.4, ease: 'easeOut' }}
Â  Â  Â  Â  Â  Â  Â  Â  className="text-center text-sm text-text-muted italic py-2 flex items-center"
Â  Â  Â  Â  Â  Â  Â  >
                {/* Optional: Could show a simple spinner here too */}
Â  Â  Â  Â  Â  Â  Â  Â  ðŸª„ This reflection will be remembered as an artifact.
Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </AnimatePresence>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Navigation Buttons */}
Â  Â  Â  Â  <div className="flex justify-between items-center pt-4 w-full"> {/* Ensure button row takes full width */}
Â  Â  Â  Â  Â  {onBack ? (
Â  Â  Â  Â  Â  Â  <Button
              type="button"
              onClick={onBack}
              variant="outline"
              disabled={showArtifactPreview} // Also disable back during save/transition
              aria-disabled={showArtifactPreview}
            >
Â  Â  Â  Â  Â  Â  Â  Back
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div /> // Spacer to keep Save button on the right
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  onClick={handleNext}
Â  Â  Â  Â  Â  Â  disabled={!userReflection.trim() || showArtifactPreview} // Disable if textarea is empty or during preview/navigation delay
Â  Â  Â  Â  Â  Â  // aria-live="polite" // Only needed if button text changes significantly based on state
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Save Reflection
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ReflectionStep; // Add default export if standard convention